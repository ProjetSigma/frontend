import * as ts from 'typescript';
import * as ngCompiler from '@angular/compiler-cli';
import { AngularCompilerOptions } from '@angular/tsc-wrapped';
/**
 * Option Constants
 */
export interface AngularWebpackPluginOptions {
    tsconfigPath?: string;
    providers?: any[];
    entryModule?: string;
    project: string;
    baseDir: string;
    basePath?: string;
    genDir?: string;
}
export declare class NgcWebpackPlugin {
    options: AngularWebpackPluginOptions;
    projectPath: string;
    rootModule: string;
    rootModuleName: string;
    reflector: ngCompiler.StaticReflector;
    reflectorHost: ngCompiler.ReflectorHost;
    program: ts.Program;
    compilerHost: ts.CompilerHost;
    compilerOptions: ts.CompilerOptions;
    angularCompilerOptions: AngularCompilerOptions;
    files: any[];
    lazyRoutes: any;
    loader: any;
    genDir: string;
    entryModule: string;
    done: Promise<void>;
    nmf: any;
    cmf: any;
    compiler: any;
    compilation: any;
    constructor(options: AngularWebpackPluginOptions);
    apply(compiler: any): void;
    private _make(compilation, cb);
    private _processNgModule(mod, ngModuleName, containingFile);
    private getNgModuleMetadata(staticSymbol);
    private extractLoadChildren(ngModuleDecorator);
    private collectRoutes(providers);
    private collectLoadChildren(routes);
}
