"use strict";
var ts = require('typescript');
var path = require('path');
var core_1 = require('@angular/core');
var ngCompiler = require('@angular/compiler-cli');
var tsc_1 = require('@angular/tsc-wrapped/src/tsc');
var reflector_host_1 = require('./reflector_host');
var resource_loader_1 = require('./resource_loader');
var utils_1 = require('./utils');
var NgcWebpackPlugin = (function () {
    function NgcWebpackPlugin(options) {
        this.options = options;
        this.nmf = null;
        this.cmf = null;
        this.compiler = null;
        this.compilation = null;
        var tsConfig = tsc_1.tsc.readConfiguration(options.project, options.baseDir);
        this.compilerOptions = tsConfig.parsed.options;
        this.files = tsConfig.parsed.fileNames;
        this.angularCompilerOptions = Object.assign({}, tsConfig.ngOptions, options);
        this.angularCompilerOptions.basePath = options.baseDir || process.cwd();
        this.genDir = this.options.genDir
            || path.resolve(process.cwd(), this.angularCompilerOptions.genDir + '/app');
        this.entryModule = options.entryModule || this.angularCompilerOptions.entryModule;
        var entryModule = this.entryModule;
        var _a = entryModule.split('#'), rootModule = _a[0], rootNgModule = _a[1];
        this.projectPath = options.project;
        this.rootModule = rootModule;
        this.rootModuleName = rootNgModule;
        this.compilerHost = ts.createCompilerHost(this.compilerOptions, true);
        this.program = ts.createProgram(this.files, this.compilerOptions, this.compilerHost);
        this.reflectorHost = new ngCompiler.ReflectorHost(this.program, this.compilerHost, this.angularCompilerOptions);
        this.reflector = new ngCompiler.StaticReflector(this.reflectorHost);
    }
    // registration hook for webpack plugin
    NgcWebpackPlugin.prototype.apply = function (compiler) {
        var _this = this;
        this.compiler = compiler;
        compiler.plugin('normal-module-factory', function (nmf) { return _this.nmf = nmf; });
        compiler.plugin('context-module-factory', function (cmf) {
            _this.cmf = cmf;
            cmf.plugin('before-resolve', function (request, callback) {
                if (!request) {
                    return callback();
                }
                request.request = _this.genDir;
                request.recursive = true;
                request.dependencies.forEach(function (d) { return d.critical = false; });
                return callback(null, request);
            });
            cmf.plugin('after-resolve', function (result, callback) {
                if (!result) {
                    return callback();
                }
                result.resource = _this.genDir;
                result.recursive = true;
                result.dependencies.forEach(function (d) { return d.critical = false; });
                result.resolveDependencies = utils_1.createResolveDependenciesFromContextMap(function (_, cb) {
                    return cb(null, _this.lazyRoutes);
                });
                return callback(null, result);
            });
        });
        compiler.plugin('make', function (compilation, cb) { return _this._make(compilation, cb); });
        compiler.plugin('after-emit', function (compilation, cb) {
            _this.done = null;
            _this.compilation = null;
            compilation._ngToolsWebpackPluginInstance = null;
            cb();
        });
    };
    NgcWebpackPlugin.prototype._make = function (compilation, cb) {
        var _this = this;
        var rootModulePath = path.normalize(this.rootModule + '.ts');
        var rootModuleName = this.rootModuleName;
        this.compilation = compilation;
        if (this.compilation._ngToolsWebpackPluginInstance) {
            cb(new Error('A ngtools/webpack plugin already exist for this compilation.'));
        }
        this.compilation._ngToolsWebpackPluginInstance = this;
        this.loader = new resource_loader_1.WebpackResourceLoader(compilation);
        var i18nOptions = {
            i18nFile: undefined,
            i18nFormat: undefined,
            locale: undefined,
            basePath: this.options.baseDir
        };
        // Create the Code Generator.
        var codeGenerator = ngCompiler.CodeGenerator.create(this.angularCompilerOptions, i18nOptions, this.program, this.compilerHost, new ngCompiler.NodeReflectorHostContext(this.compilerHost), this.loader);
        // We need to temporarily patch the CodeGenerator until either it's patched or allows us
        // to pass in our own ReflectorHost.
        reflector_host_1.patchReflectorHost(codeGenerator);
        this.done = codeGenerator.codegen()
            .then(function () {
            // process the lazy routes
            var lazyModules = _this._processNgModule(rootModulePath, rootModuleName, rootModulePath)
                .map(function (moduleKey) { return moduleKey.split('#')[0]; });
            _this.lazyRoutes = lazyModules.reduce(function (lazyRoutes, lazyModule) {
                var genDir = _this.genDir;
                lazyRoutes[(lazyModule + ".ngfactory")] = path.join(genDir, lazyModule + '.ngfactory.ts');
                return lazyRoutes;
            }, {});
        })
            .then(function () { return cb(); }, function (err) { return cb(err); });
    };
    NgcWebpackPlugin.prototype._processNgModule = function (mod, ngModuleName, containingFile) {
        var _this = this;
        var staticSymbol = this.reflectorHost.findDeclaration(mod, ngModuleName, containingFile);
        var entryNgModuleMetadata = this.getNgModuleMetadata(staticSymbol);
        var loadChildren = this.extractLoadChildren(entryNgModuleMetadata);
        return loadChildren.reduce(function (res, lc) {
            var _a = lc.split('#'), childModule = _a[0], childNgModule = _a[1];
            // TODO calculate a different containingFile for relative paths
            var children = _this._processNgModule(childModule, childNgModule, containingFile);
            return res.concat(children);
        }, loadChildren);
    };
    NgcWebpackPlugin.prototype.getNgModuleMetadata = function (staticSymbol) {
        var ngModules = this.reflector.annotations(staticSymbol).filter(function (s) { return s instanceof core_1.NgModule; });
        if (ngModules.length === 0) {
            throw new Error(staticSymbol.name + " is not an NgModule");
        }
        return ngModules[0];
    };
    NgcWebpackPlugin.prototype.extractLoadChildren = function (ngModuleDecorator) {
        var _this = this;
        var routes = ngModuleDecorator.imports.reduce(function (mem, m) {
            return mem.concat(_this.collectRoutes(m.providers));
        }, this.collectRoutes(ngModuleDecorator.providers));
        return this.collectLoadChildren(routes);
    };
    NgcWebpackPlugin.prototype.collectRoutes = function (providers) {
        var _this = this;
        if (!providers) {
            return [];
        }
        var ROUTES = this.reflectorHost.findDeclaration('@angular/router/src/router_config_loader', 'ROUTES', undefined);
        return providers.reduce(function (m, p) {
            if (p.provide === ROUTES) {
                return m.concat(p.useValue);
            }
            else if (Array.isArray(p)) {
                return m.concat(_this.collectRoutes(p));
            }
            else {
                return m;
            }
        }, []);
    };
    NgcWebpackPlugin.prototype.collectLoadChildren = function (routes) {
        var _this = this;
        if (!routes) {
            return [];
        }
        return routes.reduce(function (m, r) {
            if (r.loadChildren) {
                return m.concat(r.loadChildren);
            }
            else if (Array.isArray(r)) {
                return m.concat(_this.collectLoadChildren(r));
            }
            else if (r.children) {
                return m.concat(_this.collectLoadChildren(r.children));
            }
            else {
                return m;
            }
        }, []);
    };
    return NgcWebpackPlugin;
}());
exports.NgcWebpackPlugin = NgcWebpackPlugin;
//# sourceMappingURL=/Users/hansl/Sources/angular-cli/packages/webpack/src/plugin.js.map