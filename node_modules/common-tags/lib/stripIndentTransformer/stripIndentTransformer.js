'use strict';

/**
 * strips indentation from a template literal
 * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'
 * @return {Object}                  - a TemplateTag transformer
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stripIndentTransformer = function stripIndentTransformer() {
  var type = arguments.length <= 0 || arguments[0] === undefined ? 'initial' : arguments[0];
  return {
    onEndResult: function onEndResult(endResult) {
      if (type === 'initial') {
        // remove the shortest leading indentation from each line
        var match = endResult.match(/^[ \t]*(?=\S)/gm);
        var indent = Math.min.apply(Math, (0, _toConsumableArray3.default)(match.map(function (el) {
          return el.length;
        })));
        var regexp = new RegExp('^[ \\t]{' + indent + '}', 'gm');
        endResult = indent > 0 ? endResult.replace(regexp, '') : endResult;
      } else if (type === 'all') {
        // remove all indentation from each line
        endResult = endResult.split('\n').map(function (line) {
          return line.trimLeft();
        }).join('\n');
      } else {
        throw new Error('Unknown type: ' + type);
      }
      return endResult;
    }
  };
};

exports.default = stripIndentTransformer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU9BLElBQU0seUJBQXlCLFNBQXpCLHNCQUF5QjtBQUFBLE1BQUMsSUFBRCx5REFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcEQsZUFEb0QsdUJBQ3ZDLFNBRHVDLEVBQzVCO0FBQ3RCLFVBQUksU0FBUyxTQUFiLEVBQXdCOztBQUV0QixZQUFNLFFBQVEsVUFBVSxLQUFWLENBQWdCLGlCQUFoQixDQUFkO0FBQ0EsWUFBTSxTQUFTLEtBQUssR0FBTCw4Q0FBWSxNQUFNLEdBQU4sQ0FBVTtBQUFBLGlCQUFNLEdBQUcsTUFBVDtBQUFBLFNBQVYsQ0FBWixFQUFmO0FBQ0EsWUFBTSxTQUFTLElBQUksTUFBSixDQUFXLGFBQWEsTUFBYixHQUFzQixHQUFqQyxFQUFzQyxJQUF0QyxDQUFmO0FBQ0Esb0JBQVksU0FBUyxDQUFULEdBQWEsVUFBVSxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQWIsR0FBNkMsU0FBekQ7QUFDRCxPQU5ELE1BTU8sSUFBSSxTQUFTLEtBQWIsRUFBb0I7O0FBRXpCLG9CQUFZLFVBQVUsS0FBVixDQUFnQixJQUFoQixFQUFzQixHQUF0QixDQUEwQjtBQUFBLGlCQUFRLEtBQUssUUFBTCxFQUFSO0FBQUEsU0FBMUIsRUFBbUQsSUFBbkQsQ0FBd0QsSUFBeEQsQ0FBWjtBQUNELE9BSE0sTUFHQTtBQUNMLGNBQU0sSUFBSSxLQUFKLG9CQUEyQixJQUEzQixDQUFOO0FBQ0Q7QUFDRCxhQUFPLFNBQVA7QUFDRDtBQWZtRCxHQUF2QjtBQUFBLENBQS9COztrQkFrQmUsc0IiLCJmaWxlIjoic3RyaXBJbmRlbnRUcmFuc2Zvcm1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIHN0cmlwcyBpbmRlbnRhdGlvbiBmcm9tIGEgdGVtcGxhdGUgbGl0ZXJhbFxuICogQHBhcmFtICB7U3RyaW5nfSB0eXBlID0gJ2luaXRpYWwnIC0gd2hldGhlciB0byByZW1vdmUgYWxsIGluZGVudGF0aW9uIG9yIGp1c3QgbGVhZGluZyBpbmRlbnRhdGlvbi4gY2FuIGJlICdhbGwnIG9yICdpbml0aWFsJ1xuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgICAgICAgIC0gYSBUZW1wbGF0ZVRhZyB0cmFuc2Zvcm1lclxuICovXG5jb25zdCBzdHJpcEluZGVudFRyYW5zZm9ybWVyID0gKHR5cGUgPSAnaW5pdGlhbCcpID0+ICh7XG4gIG9uRW5kUmVzdWx0IChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eWyBcXHRdKig/PVxcUykvZ20pXG4gICAgICBjb25zdCBpbmRlbnQgPSBNYXRoLm1pbiguLi5tYXRjaC5tYXAoZWwgPT4gZWwubGVuZ3RoKSlcbiAgICAgIGNvbnN0IHJlZ2V4cCA9IG5ldyBSZWdFeHAoJ15bIFxcXFx0XXsnICsgaW5kZW50ICsgJ30nLCAnZ20nKVxuICAgICAgZW5kUmVzdWx0ID0gaW5kZW50ID4gMCA/IGVuZFJlc3VsdC5yZXBsYWNlKHJlZ2V4cCwgJycpIDogZW5kUmVzdWx0XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgZW5kUmVzdWx0ID0gZW5kUmVzdWx0LnNwbGl0KCdcXG4nKS5tYXAobGluZSA9PiBsaW5lLnRyaW1MZWZ0KCkpLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biB0eXBlOiAke3R5cGV9YClcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdFxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpcEluZGVudFRyYW5zZm9ybWVyXG4iXX0=